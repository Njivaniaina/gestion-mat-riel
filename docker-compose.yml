version: '3.8'

services:
  # Application Next.js
  app:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: emprunt-materiel-app
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_USER=emprunt_user
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=emprunt_materiel
      - JWT_SECRET=${JWT_SECRET}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - NEXT_PUBLIC_APP_URL=http://localhost:3000
    depends_on:
      mysql:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    networks:
      - emprunt-network

  # Base de donn√©es MySQL
  mysql:
    image: mysql:8.0
    container_name: emprunt-materiel-mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_DATABASE: emprunt_materiel
      MYSQL_USER: emprunt_user
      MYSQL_PASSWORD: ${DB_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./database/seed.sql:/docker-entrypoint-initdb.d/02-seed.sql
      - ./mysql.cnf:/etc/mysql/conf.d/custom.cnf
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
    networks:
      - emprunt-network

  # Serveur web Nginx (optionnel pour la production)
  nginx:
    image: nginx:alpine
    container_name: emprunt-materiel-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./uploads:/var/www/uploads
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - emprunt-network

  # Redis pour le cache (optionnel)
  redis:
    image: redis:7-alpine
    container_name: emprunt-materiel-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes
    networks:
      - emprunt-network

  # Backup automatique
  backup:
    image: mysql:8.0
    container_name: emprunt-materiel-backup
    environment:
      MYSQL_HOST: mysql
      MYSQL_USER: emprunt_user
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_DATABASE: emprunt_materiel
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh
    depends_on:
      mysql:
        condition: service_healthy
    restart: "no"
    command: /bin/bash /backup.sh
    networks:
      - emprunt-network

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local

networks:
  emprunt-network:
    driver: bridge
